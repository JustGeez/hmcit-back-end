AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  HMCT back-end

  Serverless template for HMCT resources

Parameters:
  AppName:
    Type: String
    Description: Name of the application
  ClientDomains:
    Type: CommaDelimitedList
    Description: Array of domains allowed to use this UserPool
  AdminEmail:
    Type: String
    Description: Email address for administrator
  AddGroupsToScopes:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  UserPoolId:
    Type: String
    Description: User poolID for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool

Conditions:
  ScopeGroups: !Equals [!Ref AddGroupsToScopes, "true"]

Globals:
  Function:
    Timeout: 5
    Handler: app.lambdaHandler
    Runtime: nodejs14.x
    Architectures:
      - arm64

Resources:
  #
  # Cognito User Auth
  #
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AppName}-UserPoolClient
      GenerateSecret: false # set to false for web clients
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit #for testing with postman
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      Description: Admin user group
      Precedence: 0
      UserPoolId: !Ref UserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref AdminEmail
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail
      UserPoolId: !Ref UserPool

  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref UserPool

  #
  # HTTP API
  #
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          GeneralAuth:
            AuthorizationScope:
              - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowOrigins:
          - "http://localhost:3000"
          - "https://d1zlgl3x9ii1qx.cloudfront.net"
        AllowMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
        AllowHeaders:
          - Content-Type
          - Accept
          - Access-Control-Allow-Headers
          - Access-Control-Request-Method
          - Access-Control-Request-Headers
          - Authorization
        MaxAge: 600
        AllowCredentials: true

  #
  # LAMBDA FUNCTIONS
  #
  TriggerFunction:
    Type: AWS::Serverless::Function
    Condition: ScopeGroups
    Properties:
      CodeUri: functions/cognitoScope/
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            Trigger: PreTokenGeneration
            UserPool: !Ref UserPool
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  OrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/orders/
      Events:
        CreateOrder:
          Type: HttpApi
          Properties:
            Path: /orders
            Method: post
            ApiId: !Ref HttpApi
        ReadOrders:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            Path: /orders
            Method: get
            ApiId: !Ref HttpApi
        ReadOrder:
          Type: HttpApi
          Properties:
            Path: /orders/{id}
            Method: get
            ApiId: !Ref HttpApi
        UpdateOrder:
          Type: HttpApi
          Properties:
            Path: /orders/{id}
            Method: put
            ApiId: !Ref HttpApi
        DeleteOrder:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            Path: /orders/{id}
            Method: delete
            ApiId: !Ref HttpApi
        LoadDummyData:
          Type: HttpApi
          Properties:
            Path: /orders/populateDatabaseWithTestData
            Method: get
            ApiId: !Ref HttpApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  DevicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/devices/
      Events:
        CreateDevice:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /devices
            Method: post
        ReadDevices:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: GeneralAuth
            #   AuthorizationScopes:
            #     - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /devices
            Method: get
        ReadDevice:
          Type: HttpApi
          Properties:
            Path: /devices/{id}
            Method: get
            ApiId: !Ref HttpApi
        UpdateDevice:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /devices/{id}
            Method: put
        DeleteDevice:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /devices/{id}
            Method: delete
        LoadDummyData:
          Type: HttpApi
          Properties:
            Path: /devices/populateDatabaseWithTestData
            Method: get
            ApiId: !Ref HttpApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DevicesTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  ReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/reports/
      Events:
        CreateReport:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /reports
            Method: post
        ReadReports:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /reports
            Method: get
        ReadReport:
          Type: HttpApi
          Properties:
            Path: /reports/{id}
            Method: get
            ApiId: !Ref HttpApi
        UpdateReport:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /reports/{id}
            Method: put
        DeleteReport:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            ApiId: !Ref HttpApi
            Path: /reports/{id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReportsTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  EmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/emails/
      Events:
        sendWelcomeEmail:
          Type: HttpApi
          Properties:
            Path: /emails/sendWelcomeEmail
            Method: post
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          sourceEmail: jman.12.93@gmail.com
      Policies:
        - AmazonSESFullAccess
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  ProcOrdersStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/procOrdersDbStream/
      Description: DynamoDB trigger to handle streams from order table
      Events:
        DynamoDBNewOrder:
          Type: DynamoDB
          Properties:
            Stream:
              "Fn::GetAtt":
                - OrdersTable
                - StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
      Environment:
        Variables:
          sourceEmail: jman.12.93@gmail.com
          adminEmail: jman.12.93@gmail.com
          websiteUrl: https://d1zlgl3x9ii1qx.cloudfront.net #TODO Change this to actual domain
      Policies:
        - AmazonSESFullAccess
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  #
  # DYNAMO DATABASES
  #
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      # Tags:
      #   - Department: Consumer
      #   - AppType: Serverless
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  DevicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DevicesTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      # Tags:
      #   - Department: Consumer
      #   - AppType: Serverless
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ReportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ReportsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      # Tags:
      #   - Department: Consumer
      #   - AppType: Serverless
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  OperatorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OperatorsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      # Tags:
      #   - Department: Consumer
      #   - AppType: Serverless
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  #
  # CLOUDFRONT
  #
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Serverless website OA"

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: "true"
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https

  #
  # S3 BUCKET
  #
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Change bucket name to reflect your website
      BucketName: hmct

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          - Effect: Allow
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

Outputs:
  UserPoolId:
    Description: "User pool ID"
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AppName}:UserPoolId

  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref UserPoolClient

  AuthUrl:
    Description: "URL used for authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com

  ApiEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
